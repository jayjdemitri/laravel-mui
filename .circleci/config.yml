# Use latest version of CicleCi
version: 2.1

# Define a job to be invoked later in workflow
jobs:
  build:
    ## Specify our execution environment
    docker:
      # Specify the version to use
      - image: cimg/php:8.2-node

    # Add build steps
    steps:
      # Checkout the code
      - checkout
      ## Update Env
      - run:
          name: "Updating Environment"
          command: sudo apt update
      ## Add Docker Extensions
      - run:
          name: "Installing Docker Extentions"
          command: sudo docker-php-ext-install zip
      ## Install SQLite
      - run:
          name: "Install sqlite"
          command: sudo apt-get install libsqlite3-dev
      ## Create .env file for testing
      - run:
          name: "Create Environment file"
          command: |
            mv .env.example .env
      # Download and cache composer dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      # Install composer deps
      - run:
          name: "Installing Composer Deps"
          command: composer install -n --prefer-dist
      # Cache composer deps
      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      # Download and cache npm deps
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      # Install npm deps
      - run: 
          name: "Installing NPM Deps"
          command: npm install
      # Cache npm deps
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
      # Prepare db
      - run:
          name: "Generate App key"
          command: php artisan key:generate
      - run:
          name: "Create database and run migration"
          command: |
            touch database/database.sqlite
            php artisan migrate --env=testing      
      - run:
          name: "Build React Assets"
          command: npm run build
      - run:
          name: "Run Laravel TestSuite"
          command: php artisan test

workflows:
  sample:
    jobs:
      - build
